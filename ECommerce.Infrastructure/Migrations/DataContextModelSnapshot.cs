// <auto-generated />
using System;
using ECommerce.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ECommerce.Infrastructure.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ECommerce.Domain.Entities.CartItemEntity", b =>
                {
                    b.Property<Guid>("CartItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("OrderPrimaryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ProductName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ShopperId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CartItemId");

                    b.HasIndex("OrderPrimaryId");

                    b.ToTable("CartItems");
                });

            modelBuilder.Entity("ECommerce.Domain.Entities.CheckoutEntity", b =>
                {
                    b.Property<Guid>("CheckoutId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("OrderPrimaryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("OrderStatus")
                        .HasColumnType("int");

                    b.HasKey("CheckoutId");

                    b.HasIndex("OrderPrimaryId");

                    b.ToTable("Checkouts");
                });

            modelBuilder.Entity("ECommerce.Domain.Entities.OrderEntity", b =>
                {
                    b.Property<Guid>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("OrderStatus")
                        .HasColumnType("int");

                    b.Property<Guid>("UserPrimaryId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("OrderId");

                    b.HasIndex("UserPrimaryId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("ECommerce.Domain.Entities.UserEntity", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("ECommerce.Domain.Entities.CartItemEntity", b =>
                {
                    b.HasOne("ECommerce.Domain.Entities.OrderEntity", "OrderEntity")
                        .WithMany("CartItems")
                        .HasForeignKey("OrderPrimaryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OrderEntity");
                });

            modelBuilder.Entity("ECommerce.Domain.Entities.CheckoutEntity", b =>
                {
                    b.HasOne("ECommerce.Domain.Entities.OrderEntity", "OrderEntity")
                        .WithMany()
                        .HasForeignKey("OrderPrimaryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OrderEntity");
                });

            modelBuilder.Entity("ECommerce.Domain.Entities.OrderEntity", b =>
                {
                    b.HasOne("ECommerce.Domain.Entities.UserEntity", "UserEntity")
                        .WithMany("Orders")
                        .HasForeignKey("UserPrimaryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserEntity");
                });

            modelBuilder.Entity("ECommerce.Domain.Entities.OrderEntity", b =>
                {
                    b.Navigation("CartItems");
                });

            modelBuilder.Entity("ECommerce.Domain.Entities.UserEntity", b =>
                {
                    b.Navigation("Orders");
                });
#pragma warning restore 612, 618
        }
    }
}
